# TODO: add this action: https://github.com/XAMPPRocky/deploy-mdbook for docs folder
name: Build

on:
  push:
    paths-ignore:
      - '.github/**'
      - '!.github/workflows/**'
      - '.gitignore'
      - 'docs/**'
      - 'CODE_OF_CONDUCT.md'
      - 'LICENSE'
      - 'readme.md'
  pull_request:
    paths-ignore:
      - '.github/**'
      - '!.github/workflows/**'
      - '.gitignore'
      - 'docs/**'
      - 'CODE_OF_CONDUCT.md'
      - 'LICENSE'
      - 'readme.md'

jobs:
  build:
    name: "Build"

    strategy:
      fail-fast: false
      matrix:
        platform:
          - ubuntu-latest
          - macos-latest
          - windows-latest

        profile:
          - debug
          - release

        page_tables:
          - physical_page_tables

        allocator:
          - linked_list_allocation
          - bump_allocation
          - fixed_sized_allocation

    runs-on: ${{ matrix.platform }}
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ matrix.profile }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2021-09-16
          profile: minimal
          components: "llvm-tools-preview, rust-src"
          override: true

      - name: Rust Version
        run: |
          rustc -Vv
          cargo -Vv

      - name: Install bootimage
        uses: actions-rs/install@v0.1
        with:
          crate: bootimage
          version: 0.10.3

      - name: Generate build (debug)
        if: matrix.profile == 'debug'
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --no-default-features --features=${{ matrix.page_tables }},${{ matrix.allocator }}
        env:
          RUSTFLAGS: "-D warnings"

      - name: Generate build (release)
        if: matrix.profile == 'release'
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --no-default-features --features=${{ matrix.page_tables }},${{ matrix.allocator }}
        env:
          RUSTFLAGS: "-D warnings"

      - name: Install QEMU (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install qemu-system-x86

      - name: Install QEMU (macOS)
        if: runner.os == 'macOS'
        run: brew install qemu
        env:
          HOMEBREW_NO_AUTO_UPDATE: 1
          HOMEBREW_NO_BOTTLE_SOURCE_FALLBACK: 1
          HOMEBREW_NO_INSTALL_CLEANUP: 1

      - name: Install QEMU (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install qemu --version 2021.5.5
          echo "$Env:Programfiles\qemu" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: pwsh

      - name: QEMU Version
        run: qemu-system-x86_64 --version

      - name: Run tests (debug)
        if: matrix.profile == 'debug'
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --no-default-features --features=${{ matrix.page_tables }},${{ matrix.allocator }}

      - name: Run tests (release)
        if: matrix.profile == 'release'
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release --no-default-features --features=${{ matrix.page_tables }},${{ matrix.allocator }}

  check-formatting:
    name: "Check formatting"
    needs: build

    runs-on: ubuntu-latest
    timeout-minutes: 2

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2021-09-16
          profile: minimal
          components: "rustfmt"
          override: true

      - name: Rust Version
        run: |
          rustc -Vv
          cargo -Vv

      - name: Check formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: -- --check

  lint:
    name: "Lint"
    needs: build

    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2021-09-16
          profile: minimal
          components: "clippy"
          override: true

      - name: Rust Version
        run: |
          rustc -Vv
          cargo -Vv

      - name: Lint
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings
